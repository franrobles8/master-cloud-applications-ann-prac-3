AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  serverless

  SAM template for books application

Resources:
  booksGetAllBooksFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: books.lambdaGetAllBooks
      Runtime: nodejs14.x
      Events:
        lambdaGetAllBooks:
          Type: Api
          Properties:
            Path: /api/v1/books/
            Method: get
        lambdaCreateComment:
          Type: Api
          Properties:
            Path: /api/v1/books/{id}/comments
            Method: post
        lambdaDeleteComment:
          Type: Api
          Properties:
            Path: /api/v1/books/{id}/comments/{commentId}
            Method: delete
      Policies:
        - AmazonDynamoDBFullAccess

  booksGetBookByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: books.lambdaGetBookById
      Runtime: nodejs14.x
      Events:
        lambdaGetBookById:
          Type: Api
          Properties:
            Path: /api/v1/books/{id}
            Method: get
      Policies:
        - AmazonDynamoDBFullAccess
  
  booksCreateBookFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: books.lambdaCreateBook
      Runtime: nodejs14.x
      Events:
        lambdaCreateBook:
          Type: Api
          Properties:
            Path: /api/v1/books/
            Method: post
      Policies:
        - AmazonDynamoDBFullAccess

  booksUpdateBookFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: books.lambdaUpdateBook
      Runtime: nodejs14.x
      Events:
        lambdaUpdateBook:
          Type: Api
          Properties:
            Path: /api/v1/books/{id}
            Method: patch
      Policies:
        - AmazonDynamoDBFullAccess
  booksDeleteBookFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: books.lambdaDeleteBook
      Runtime: nodejs14.x
      Events:
        lambdaDeleteBook:
          Type: Api
          Properties:
            Path: /api/v1/books/{id}
            Method: delete
      Policies:
        - AmazonDynamoDBFullAccess

  commentsGetAllCommentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: comments.lambdaGetAllComments
      Runtime: nodejs14.x
      Events:
        lambdaGetAllComments:
          Type: Api
          Properties:
            Path: /api/v1/books/{id}/comments
            Method: get
      Policies:
        - AmazonDynamoDBFullAccess
  
  commentsGetCommentByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: comments.lambdaGetCommentById
      Runtime: nodejs14.x
      Events:
        lambdaGetCommentById:
          Type: Api
          Properties:
            Path: /api/v1/books/{id}/comments/{commentId}
            Method: get
      Policies:
        - AmazonDynamoDBFullAccess
    
  commentsCreateCommentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: comments.lambdaCreateComment
      Runtime: nodejs14.x
      Events:
        lambdaCreateComment:
          Type: Api
          Properties:
            Path: /api/v1/books/{id}/comments
            Method: post
      Policies:
        - AmazonDynamoDBFullAccess
  
  commentsUpdateCommentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: comments.lambdaUpdateComment
      Runtime: nodejs14.x
      Events:
        lambdaUpdateComment:
          Type: Api
          Properties:
            Path: /api/v1/books/{id}/comments/{commentId}
            Method: patch
      Policies:
        - AmazonDynamoDBFullAccess
      
  commentsDeleteCommentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: comments.lambdaDeleteComment
      Runtime: nodejs14.x
      Events:
        lambdaDeleteComment:
          Type: Api
          Properties:
            Path: /api/v1/books/{id}/comments/{commentId}
            Method: delete
      Policies:
        - AmazonDynamoDBFullAccess
  
  booksTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
        TableName: books
        AttributeDefinitions:
            -   AttributeName: id
                AttributeType: S
        KeySchema:
            -   AttributeName: id
                KeyType: HASH
        ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5

  commentsTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
        TableName: comments
        AttributeDefinitions:
            -   AttributeName: id
                AttributeType: S
        KeySchema:
            -   AttributeName: id
                KeyType: HASH
        ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5

Outputs:
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  BookApi:
    Description: "API Gateway endpoint URL for Prod stage for books function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/books/"
